{"version":3,"sources":["components/Todo.js","components/TodoList.js","App.js","index.js"],"names":["ButtonStyled","styled","Button","p","isCompleted","css","Todo","todo","onCheckBtnClick","shouldFitContainer","iconAfter","className","onClick","id","primaryColor","name","TodoList","todoList","map","TODO_APP_STORAGE_KEY","App","useState","setTodoList","textInput","setTextInput","useEffect","storageTodoList","localStorage","getItem","JSON","parse","setItem","stringify","onTextInputChange","useCallback","e","target","value","onAddBtnClick","v4","prevState","placeholder","elemAfterInput","isDisabled","appearance","padding","onChange","onKeyDown","keyCode","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4QAKMA,EAAeC,YAAOC,IAAPD,CAAH,wWAKR,SAACE,GAAD,OACEA,EAAEC,aACFC,YADA,2FAqBG,SAASC,EAAT,GAA0C,IAA1BC,EAAyB,EAAzBA,KAAMC,EAAmB,EAAnBA,gBACjC,OAAO,cAACR,EAAD,CACHI,YAAaG,EAAKH,YAClBK,oBAAkB,EAClBC,WAAYH,EAAKH,aACb,sBAAMO,UAAU,aAAaC,QAAS,kBAAMJ,EAAgBD,EAAKM,KAAjE,SACI,cAAC,IAAD,CAAWC,aAAa,YAL7B,SAUFP,EAAKQ,OCxCC,SAASC,EAAT,GAAkD,IAA9BC,EAA6B,EAA7BA,SAAUT,EAAmB,EAAnBA,gBACzC,OACI,mCACKS,EAASC,KAAI,SAACX,GAAD,OACV,cAACD,EAAD,CAAoBC,KAAMA,EAAMC,gBAAiBA,GAAtCD,EAAKM,S,oBCF1BM,EAAuB,WA0DdC,MAxDf,WACE,MAAgCC,mBAAS,IAAzC,mBAAOJ,EAAP,KAAiBK,EAAjB,KACA,EAAkCD,mBAAS,IAA3C,mBAAOE,EAAP,KAAkBC,EAAlB,KAEAC,qBAAU,WACR,IAAMC,EAAkBC,aAAaC,QAAQT,GACzCO,GACFJ,EAAYO,KAAKC,MAAMJ,MAExB,IAEHD,qBAAU,WACRE,aAAaI,QAAQZ,EAAsBU,KAAKG,UAAUf,MACzD,CAACA,IAEJ,IAAMgB,EAAoBC,uBAAY,SAACC,GACrCX,EAAaW,EAAEC,OAAOC,SACrB,IAEGC,EAAgBJ,uBAAY,SAACC,GACf,KAAdZ,IACFD,EAAY,CAAC,CAACT,GAAI0B,cAAMxB,KAAMQ,EAAWnB,aAAa,IAA3C,mBAAsDa,KACnEO,EAAa,OAEZ,CAACD,EAAWN,IAETT,EAAkB0B,uBAAY,SAACrB,GACnCS,GAAY,SAACkB,GAAD,OACVA,EAAUtB,KAAI,SAAAX,GAAI,OAChBA,EAAKM,KAAOA,EAAZ,2BAAqBN,GAArB,IAA2BH,aAAa,IAAxC,eAAoDG,WAGvD,IAQH,OACE,qCACE,gFACA,cAAC,IAAD,CAAWQ,KAAK,WAAW0B,YAAY,uCAAuBC,eAC5D,cAAC,IAAD,CAAQC,YAAapB,EAAWqB,WAAW,UAAUhC,QAAS0B,EAA9D,qBAEFjC,IAAK,CAACwC,QAAS,eACfR,MAAOd,EACPuB,SAAUb,EACVc,UAfa,SAACZ,GACC,KAAdA,EAAEa,SACFV,OAeD,cAACtB,EAAD,CAAUC,SAAUA,EAAUT,gBAAiBA,QCrDrDyC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.70e6a043.chunk.js","sourcesContent":["import React from 'react'\nimport Button from '@atlaskit/button'\nimport styled, { css } from 'styled-components'\nimport CheckIcon from '@atlaskit/icon/glyph/check'\n\nconst ButtonStyled = styled(Button)`\n    margin-top: 5px;\n    text-align: left;\n\n    &, &:hover {\n        ${(p) =>\n            p.isCompleted &&\n            css`\n                text-decoration: line-through;\n            `}\n    }\n\n    &:hover{\n        .check-icon{\n            display: inline-block;\n        }\n    }\n\n    .check-icon {\n        display: none;\n        &:hover {\n            background-color: #e2e2e2;\n            border-radius: 3px;\n        }\n    }\n`;\n\nexport default function Todo({ todo, onCheckBtnClick }) {\n    return <ButtonStyled\n        isCompleted={todo.isCompleted}\n        shouldFitContainer\n        iconAfter={!todo.isCompleted &&(\n            <span className=\"check-icon\" onClick={() => onCheckBtnClick(todo.id)}>\n                <CheckIcon primaryColor='green'/>\n            </span>\n        )\n        }\n    >\n        {todo.name}\n    </ButtonStyled>\n}\n","import React from 'react'\nimport Todo from './Todo'\n\nexport default function TodoList({ todoList, onCheckBtnClick }) {\n    return (\n        <>\n            {todoList.map((todo) => (\n                <Todo key={todo.id} todo={todo} onCheckBtnClick={onCheckBtnClick}/>\n            ))}\n\n        </>\n    )\n}\n","import TodoList from './components/TodoList';\nimport Button from '@atlaskit/button'\nimport Textfield from '@atlaskit/textfield'\nimport { useCallback, useState, useEffect } from 'react'\nimport { v4 } from 'uuid'\nconst TODO_APP_STORAGE_KEY = 'TODO_APP'\n\nfunction App() {\n  const [todoList, setTodoList] = useState([]);\n  const [textInput, setTextInput] = useState('');\n\n  useEffect(() => {\n    const storageTodoList = localStorage.getItem(TODO_APP_STORAGE_KEY)\n    if (storageTodoList) {\n      setTodoList(JSON.parse(storageTodoList))\n    }\n  }, [])\n\n  useEffect(() => {\n    localStorage.setItem(TODO_APP_STORAGE_KEY, JSON.stringify(todoList));\n  }, [todoList])\n\n  const onTextInputChange = useCallback((e) => {\n    setTextInput(e.target.value);\n  }, [])\n\n  const onAddBtnClick = useCallback((e) => {\n    if (textInput !== ''){\n      setTodoList([{id: v4(), name: textInput, isCompleted: false}, ...todoList]);\n    setTextInput('');\n    }\n  }, [textInput, todoList]);\n\n  const onCheckBtnClick = useCallback((id) => {\n    setTodoList((prevState) =>\n      prevState.map(todo =>\n        todo.id === id ? {...todo, isCompleted: true} : {...todo}\n        )\n      );\n  }, [])\n\n  const keyPress = (e) => {\n    if(e.keyCode === 13){\n       onAddBtnClick();\n    }\n  }\n\n  return (\n    <>\n      <h3>Đây là danh sách cần làm</h3>\n      <Textfield name='add-todo' placeholder='Thêm việc cần làm...' elemAfterInput={\n        <Button isDisabled={!textInput} appearance='primary' onClick={onAddBtnClick}>Thêm</Button>\n      }\n      css={{padding: '2px 4px 2px'}}\n      value={textInput}\n      onChange={onTextInputChange}\n      onKeyDown={keyPress}\n      ></Textfield>\n      <TodoList todoList={todoList} onCheckBtnClick={onCheckBtnClick}/>\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}